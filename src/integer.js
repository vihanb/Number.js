/* Generated by Babel */
////
//
// Number.js
// Better Numbers for JavaScript
// with ridiculious optimizations
////

/**
 * Sacrafice List
 * List of sacrafices made for performance:

 * No strings
 * Using pop
 * No `for`
 * No `+`, too slow
 * No `%`, too slow
 * No casting
 * No reverse
 * No slice
 * No +=
 * No join
 */

/*=== INTEGER PRIMITIVE ===*/

/**
 * add
 * times
 * minus
 */
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Int = (function () {
  function Int(str) {
    _classCallCheck(this, Int);

    this.Num = str.split("");
  }

  /**
   * == Integer Class ==
   */

  _createClass(Int, [{
    key: "plus",
    value: function plus(n) {
      var N = undefined;
      if (n instanceof Array) {
        N = n;
      } else {
        N = n.split("");
      }
      var B = this.Num; // Lookups are slow as heck

      var R = []; // Contains results
      var C = 0; // Carry out register
      var L = 0;

      var Q = Math.max(B.length, N.length);

      while (Q--) {
        // undefined|0 === 0
        L = (N.pop() | 0) + (B.pop() | 0) + C;
        if (L > 9) {
          // Carry out
          R.unshift(L - 10); // First value
          C = 1; // Set carry out
        } else {
            R.unshift(L | 0);
            C = 0;
          }
      }
      if (C === 1) R.unshift(1); // Finish carry outs
      this.Num = R;
      return this;
    }
  }, {
    key: "minus",
    value: function minus(n) {
      var N = undefined;
      if (n instanceof Array) {
        N = n;
      } else {
        N = n.split("");
      }
      var B = this.Num; // Lookups are slow as heck

      var R = []; // Contains results
      var C = 0; // Carry out register
      var L = 0;

      var Q = Math.max(B.length, N.length);

      while (Q--) {
        // undefined|0 === 0
        L = (N.pop() | 0) - (B.pop() | 0) - C;
        if (L < 0) {
          // Carry out
          R.unshift(L + 10); // First value
          C = 1; // Set carry out
        } else {
            R.unshift(L | 0);
            C = 0;
          }
      }
      if (C === 1) R.unshift('-'); // Finish carry outs
      this.Num = R;
      return this;
    }
  }, {
    key: "val",
    get: function get() {
      return this.Num.join("");
    },
    set: function set(n) {
      this.Num = n.split("");
    }
  }]);

  return Int;
})();

var IntegerValidate = function IntegerValidate(Integer) {
  var N = undefined;
  if (Integer instanceof Array) N = Integer.join("");else if (Integer instanceof String) N = Integer;else if (Integer instanceof Number) N = Integer + "";else if (Integer instanceof Integer) N = Integer.N.slice(); // FIX
  else if (Integer instanceof Int) N = undefined.Num.join("");else throw new TypeError("can't convert " + Integer.constructor.name + " to integer primitive");

  N = +N;

  if (N !== N) N = new Num(N);else throw new TypeError(undefined.Value + " to integer");

  return N;
};

var Integer = (function () {
  function Integer(obj) {
    _classCallCheck(this, Integer);

    this.Value = IntegerValidate(N);
  }

  /**
    // Example Use
  
    var one = Num('1');
    one.add('2');
    one.add(one);
  
    */

  _createClass(Integer, [{
    key: "add",
    value: function add(obj) {
      this.Value.add(IntegerValidate);
    }
  }, {
    key: "Length",
    get: function get() {
      return this.Value.length >>> 0;
    }
  }]);

  return Integer;
})();