/* Generated by Babel */
////
//
// Number.js
// Better Numbers for JavaScript
// Lots of sacrafices have been taken for very fast preformance
////

/**
 * Sacrafice List
 * List of sacrafices made for performance:
 
 * No strings
 * Using pop
 * No `for`
 * No `+`, too slow
 * No `%`, too slow
 */

"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Num = (function () {
  function Num(str) {
    _classCallCheck(this, Num);

    this.Num = str.split("");
  }

  /** 
    // Example Use
    
    var one = Num('1');
    one.add('2');
    one.add(one);
    
    */

  _createClass(Num, [{
    key: "Iadd",
    value: function Iadd(n) {
      var N = n.split("");
      var B = this.Num; // Lookups are slow as heck
      var C = 0; // Carry out register
      var L = 0;
      if (n instanceof Num === true) {
        N = n.NumInt;
      } else {
        N = n.split("");
      }

      while (N.length) {
        // Carry outs make this a mess, so we'll just use the cpu's adders rather than bitwise
        //L = (N.pop() | 0) + (B.pop() | 0) + (C | 0);
        console.log(( (N.pop() | 0) + (B.pop() | 0) ),  );
        /*if (L > 9) {
          B.push(L - 10);
          C = 1;
        } else {
          B.push(L);
          C = 0;
        }*/
      }
      if (C === 1) B.push(1); // Finish carry outs

      this.Num = B;

      return B;
    }
  }]);

  return Num;
})();